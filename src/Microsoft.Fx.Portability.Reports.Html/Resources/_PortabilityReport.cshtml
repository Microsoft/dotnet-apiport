@*
   Copyright (c) Microsoft. All rights reserved.
   Licensed under the MIT license. See LICENSE file in the project root for full license information.
*@

@model Microsoft.Fx.Portability.Reports.RazorHtmlObject

@using Microsoft.Fx.Portability.Reports.Html.Resources
@using System.Collections.Generic;
@using System.IO
@using System.Linq

@{
    var reportingResult = Model.ReportingResult;
}

<h2 _locid="SummaryTitle">
    <a name="@LocalizedStrings.PortabilitySummaryPageTitle"></a>@LocalizedStrings.PortabilitySummaryPageTitle
</h2>
<table>
    <tbody>
        <tr>
            <th>@LocalizedStrings.AssemblyHeader</th>
            @foreach (var target in Model.TargetHeaders)
            {
                <th>@target</th>
            }
        </tr>

        @*Writing the summary body information here.*@
        @foreach (var assembly in Model.OrderedAssembliesByIdentity)
        {
            <tr>
                <td><strong><a href="#@assembly.SourceAssembly">
                    <span class="assembly-name">@assembly.SourceAssembly</span>
                    @if (!string.IsNullOrEmpty(assembly.SourceAssembly.TargetFrameworkMoniker))
                    {
                        <span class="assembly-tfm">(@assembly.SourceAssembly.TargetFrameworkMoniker)</span>
                    }
                </a></strong></td>
                @foreach (var usageData in @assembly.UsageData)
                {
                    <td class="text-center">@usageData.PortabilityIndex.ToString("P2")</td>
                }
            </tr>
        }
        @foreach (var invalidAssembly in reportingResult.GetAssembliesWithError())
        {
            var fileName = Path.GetFileName(invalidAssembly);
            var message = string.Format("{0} is an invalid assembly.", fileName);
            <tr>
                <td>@message</td>
            </tr>
        }
    </tbody>
</table>
<div id="details">
        <h3>Hide rows:</h3>
        <form>
            <input type="checkbox" id="row_visibility_checkbox" onchange="ToggleRowVisibility(this)">
            <label for="row_visibility_checkbox">Hide rows that don't have problems</label>
        </form>

        @{ 
            var detailColumnHeaders = new List<string>();
            detailColumnHeaders.Add(LocalizedStrings.TargetTypeHeader);
            detailColumnHeaders.AddRange(Model.TargetHeaders);
            detailColumnHeaders.Add(LocalizedStrings.RecommendedChanges);

        <h3>Hide columns:</h3>
        <form>
            @* It doesn't make sense to hide the first column (Target type), which lists
                names of the types and members that have possible problems in porting. *@
            @for (int i = 1; i < detailColumnHeaders.Count; i++)
            {
                var id = "checkbox" + i.ToString();
                <input type="checkbox" id="@id" onchange='onToggleColumnVisibility(this)'>
                <label for="@id">@detailColumnHeaders[i]</label>
            }
        </form>
        }

        @foreach (var assembly in Model.OrderedAssembliesByIdentity)
        {
            // avoid writing blank details tables (happens if a non-.NET assembly is analyzed)
            bool isDotNETAssembly = false;
            foreach (var type in Model.MissingTypes)
            {
                if (type.UsedIn.Contains(assembly.SourceAssembly))
                {
                    isDotNETAssembly = true;
                    break;
                }
            }
            if (!isDotNETAssembly)
            {
                continue;
            }

            var assemblyName = reportingResult.GetNameForAssemblyInfo(assembly.SourceAssembly);
            <a name="@assembly.SourceAssembly"><h3>
                <span class="assembly-name">@assembly.SourceAssembly</span>
                @if (!string.IsNullOrEmpty(@assembly.SourceAssembly.TargetFrameworkMoniker))
                {
                    <span class="assembly-tfm">(@assembly.SourceAssembly.TargetFrameworkMoniker)</span>
                }
            </h3></a>
            var usedUnresolvedAssembly = Model.GetUnresolvedAssemblies(assembly);
            if (usedUnresolvedAssembly.Count > 0)
            {
                <table>
                    <tbody>
                        <tr><th>Missing Assemblies</th></tr>
                        @foreach (var name in usedUnresolvedAssembly)
                    {
                            <tr><td>@name</td></tr>
                        }
                    </tbody>
                </table>
                <a>&nbsp;</a> @*insert a blank line for readability*@
            }

            <table class="table_portability_details">
                <tbody>
                    <tr>
                        @foreach (var header in detailColumnHeaders)
                        {
                            <th>@header</th>
                        }
                    </tr>
                    @*  IsMissing  => the type is entirely unsupported
                        !IsMissing => only some members are unsupported *@
                    @foreach (var type in Model.MatchingMissingTypes(assembly))
                    {
                    var name = Model.RemoveTypeOrMemberPrefix(type.TypeName);
                    <tr>
                        <td>@name</td>
                        @foreach (var version in Model.GetMatchingTargetsAndSupportedVersions(type.TargetVersionStatus))
                        {
                            var className = version.SupportedIn == null || version.Target.Version < version.SupportedIn ? "IconErrorEncoded" : "IconSuccessEncoded";
                            <td class="@className"></td>
                        }
                        <td>@type.RecommendedChanges</td>
                    </tr>
                        @*write a row for each of the type's missing members*@
                    foreach (var member in type.MissingMembers.OrderBy(y => y.MemberName).ToList())
                    {
                        var formattedName = member.MemberName.Substring(type.TypeName.Length + 1);
                        <tr>
                            <td style="padding-left:2em">@formattedName</td>
                            @foreach (var version in Model.GetMatchingTargetsAndSupportedVersions(member.TargetVersionStatus))
                            {
                                var className = version.SupportedIn == null || version.Target.Version < version.SupportedIn ? "IconErrorEncoded" : "IconSuccessEncoded";
                                <td class="@className"></td>
                            }
                            <td>@member.RecommendedChanges</td>
                        </tr>
                    }
                    <tr>
                        @foreach (var column in detailColumnHeaders)
                        {
                            <td>&nbsp;</td>
                        }
                    </tr>
                    }
                </tbody>
            </table>

            <p>
                <a href="#@LocalizedStrings.PortabilitySummaryPageTitle">@LocalizedStrings.BackToSummary</a>
            </p>
        }
</div>

@if (Model.NuGetPackages != null && Model.NuGetPackages.Any())
{
    <div id="nugetpackageinfo">
        <h3>Available NuGet Packages</h3>
        @{
            bool showAssemblyName = Model.NuGetPackages.Any(p => !string.IsNullOrEmpty(p.AssemblyInfo));

            var nugetColumnHeaders = new List<string>();
            nugetColumnHeaders.Add(LocalizedStrings.PackageIdHeader);
            nugetColumnHeaders.AddRange(Model.TargetHeaders);

            if (showAssemblyName)
            {
                nugetColumnHeaders.Add(LocalizedStrings.AssemblyHeader);
            }
        }
    
        <table>
            <tbody>
                <tr>
                    @foreach (var header in nugetColumnHeaders)
                    {
                        <th>@header</th>
                    }
                </tr>

                @foreach (var nugetPackage in Model.NuGetPackages)
                {
                    <tr>
                        <td>@nugetPackage.PackageId</td>

                        @foreach (var target in Model.Targets)
                        {
                            string version = "";
                            if (nugetPackage.SupportedVersions.TryGetValue(target, out version))
                            {
                                <td>@version</td>
                            }
                            else
                            {
                                <td>@LocalizedStrings.NotSupported</td>
                            }
                        }

                        @if (!string.IsNullOrEmpty(nugetPackage.AssemblyInfo))
                        {
                            <td>@nugetPackage.AssemblyInfo</td>
                        }
                      
                    </tr>
                }
            
            </tbody>
        </table>
    

        <p>
            <a href="#@LocalizedStrings.PortabilitySummaryPageTitle">@LocalizedStrings.BackToSummary</a>
        </p>
    </div>
}
