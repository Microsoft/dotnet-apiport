<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Analyze" xml:space="preserve">
    <value>Analyze</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>Microsoft (R) {0} v{1}
Copyright (C) Microsoft Corporation. All rights reserved.

To learn more about how this tool works, including the data we are collecting, go here - http://go.microsoft.com/fwlink/?LinkId=397652
</value>
  </data>
  <data name="ListOfAssembliesToAnalyze" xml:space="preserve">
    <value>List of assemblies to analyze</value>
  </data>
  <data name="ListTargets" xml:space="preserve">
    <value>Use to see the available targets against which you can validate your assemblies</value>
  </data>
  <data name="DescriptionHelp" xml:space="preserve">
    <value>Description of the submission</value>
  </data>
  <data name="OutputFileName" xml:space="preserve">
    <value>Output file name</value>
  </data>
  <data name="ProgressReportDone" xml:space="preserve">
    <value>Done in {0:F2}s.</value>
  </data>
  <data name="TargetsToCheckAgainst" xml:space="preserve">
    <value>The targets you want to check against. To specify multiple targets separate them with ';'.</value>
  </data>
  <data name="WritingReport" xml:space="preserve">
    <value>Writing report.</value>
  </data>
  <data name="OutputWrittenTo" xml:space="preserve">
    <value>Wrote output to file: "{0}"</value>
  </data>
  <data name="ProgressReportFailed" xml:space="preserve">
    <value>Failed after {0:F2}s</value>
  </data>
  <data name="AvailableTargets" xml:space="preserve">
    <value>Available Targets:</value>
    <comment>Used to display list of available targets</comment>
  </data>
  <data name="InvalidCommandLineArguments" xml:space="preserve">
    <value>Invalid argument was passed in. Please check your command line parameters.
{0}</value>
    <comment>{0} is the message from the parser with the actual error</comment>
  </data>
  <data name="OverwriteFile" xml:space="preserve">
    <value>Replaced output file "{0}"</value>
    <comment>Displayed when a file exists and will be overwritten</comment>
  </data>
  <data name="AvailableAliases" xml:space="preserve">
    <value>Available Aliases:</value>
  </data>
  <data name="TargetsList" xml:space="preserve">
    <value>- {0} [Version: {1}]</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>API Portability Analyzer</value>
  </data>
  <data name="TargetsListNoVersion" xml:space="preserve">
    <value>- {0}</value>
  </data>
  <data name="VersionListJoin" xml:space="preserve">
    <value>; </value>
  </data>
  <data name="UnknownException" xml:space="preserve">
    <value>There was an unexpected error.  Please try again or contact NETAPIPort@Microsoft.com for help.</value>
  </data>
  <data name="TargetsListGrouped" xml:space="preserve">
    <value>- {0} ({1})</value>
  </data>
  <data name="NotesOnUsage" xml:space="preserve">
    <value>Notes on usage:</value>
  </data>
  <data name="WhatAsteriskMeans" xml:space="preserve">
    <value>Versions marked with an asterisk (*) implies that these are default targets if none are submitted.</value>
  </data>
  <data name="MonoWebRequestsFailure" xml:space="preserve">
    <value>If you are running on the mono runtime, you must configure root certificates before using this application.  Please see http://www.mono-project.com/docs/faq/security/</value>
  </data>
  <data name="ResultFormatHelp" xml:space="preserve">
    <value>The report output format.</value>
  </data>
  <data name="Targets" xml:space="preserve">
    <value>Targets</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
</root>