<!--
   Copyright (c) Microsoft. All rights reserved.
   Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->

<script>
    // Toggle the element controlled by a toggle button on or off
    function toggle(caller) {
        var elementName = this.id.substr(6);
        var element = document.getElementById(elementName);
        var currentClass = element.getAttribute('class');
        if (currentClass === null) {
            // If the element has no class, then it's on. Turn it off.
            element.setAttribute('class', 'ToggledOff');
            this.innerHTML = '+';
        }
        else if (currentClass.search(/\bToggledOff\b/) > -1) {
            // If it has ToggledOff as a class, then it's off. Turn it on.
            element.setAttribute('class', currentClass.replace(/\bToggledOff\b/, '').trim());
            this.innerHTML = '&#8212';
        }
        else {
            // If it doesn't have ToggledOff as a class, then it's on. Turn it off.
            element.setAttribute('class', currentClass.concat(' ToggledOff').trim());
            this.innerHTML = '+';
        }
    }

    // Hook up toggle buttons' click events
    var toggleButtons = document.getElementsByClassName('ToggleButton');
    for (var i = 0; i < toggleButtons.length; i++) {
        toggleButtons[i].addEventListener('click', toggle);
    }

    // Turn off any elements that should begin collapsed. Note that this is done with the extra
    // BeginToggledOff class instead of applying ToggledOff directly to these elements because they should be
    // visible if javascript is unavailable for some reason.
    var beginCollapsed = document.getElementsByClassName('BeginToggledOff');
    for (var i = 0; i < beginCollapsed.length; i++) {
        var currentClass = beginCollapsed[i].getAttribute('class');
        beginCollapsed[i].setAttribute('class', currentClass.concat(' ToggledOff').trim());
    }

    // Toggle the visibility of a column in the portability report detail
    // table (id='table_portability_details')
    function show_hide_column(col_no, do_show) {
        var stl;
        if (do_show) stl = ''
        else stl = 'none';

        var tables = document.getElementsByClassName('table_portability_details');
        for (var tbl = 0; tbl < tables.length; tbl++) {
            var rows = tables[tbl].getElementsByTagName('tr');

            var headers = rows[0].getElementsByTagName('th');
            headers[col_no].style.display = stl;

            for (var row = 1; row < rows.length; row++) {
                var cels = rows[row].getElementsByTagName('td')
                cels[col_no].style.display = stl;
            }
        }
    }

    // Event handler for checkboxes to hide columns in the portability report detail table.
    function ToggleColumnVisibility(element) {
        var col_id = parseInt(element.id.substr(-1));
        var visible = !element.checked;
        show_hide_column(col_id, visible);
        // Refresh the rows because showing columns could make error cells visible.
        ToggleRowVisibility(document.getElementById('row_visibility_checkbox'));
    }


    function ToggleRowVisibility(element){
        var stl;
        if (!element.checked) stl = '';
        else stl = 'none';

        var tables = document.getElementsByClassName('table_portability_details');
        for (var tbl = 0; tbl < tables.length; tbl++) {
            var rows = tables[tbl].getElementsByTagName('tr');
            if (stl == '') { // show all rows
                for(var row = 0; row < rows.length; row++)
                    if (rows[row].style.display == 'none') rows[row].style.display = stl; // show previously hidden rows
            } else {
                var row = 1;
                while (row < rows.length) { // work on one Target type at a time.
                    var type_row = rows[row];
                    var type_has_visible_child = false;
                    var j = row + 1;
                    var cels = rows[j].getElementsByTagName('td');
                    while (cels[0].innerHTML != '&nbsp;') { // Types are separated by blank rows.
                        var all_cells_success = true;
                        // No need to check the first column (Target type) and the last column (Recommended changes)
                        for (var cel = 1; cel < cels.length - 1; cel++) {
                            var cell = cels[cel];
                            // Keep rows that have visible errors
                            if (cell.classList.contains('IconErrorEncoded') && cell.style.display != 'none') {
                                all_cells_success = false;
                                type_has_visible_child = true;
                                break;
                            }
                        }
                        // Hide all success row
                        if (all_cells_success) rows[j].style.display = stl;
                        else rows[j].style.display = '';
                        j += 1;
                        cels = rows[j].getElementsByTagName('td');
                    }
                    if (type_has_visible_child) {
                        type_row.style.display = ''; // make sure they are visible
                        rows[j].style.display = '';
                    } else {
                        type_row.style.display = stl; // hide the type row
                        rows[j].style.display = stl;  // hide the blank separator row
                    }
                    row = j+1;
                }
            }
        }
    }
</script>