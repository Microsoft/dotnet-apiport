<?xml version="1.0" encoding="utf-8"?>
<Project>

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputDrop>$(TF_BUILD_BINARIESDIRECTORY)</OutputDrop>
    <NoWarn>$(NoWarn),1570,1572,1573,1574,1591,1701</NoWarn>
    <!-- This is due to aspnet/Mvc #7852 -->
    <NoWarn>$(NoWarn),8032</NoWarn>
    <Features>IOperation;$(Features)</Features>
    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)\rules.ruleset</CodeAnalysisRuleSet>
    <WriteVersionInfoToBuildLog>True</WriteVersionInfoToBuildLog>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <PropertyGroup>
    <LicenseDocumentDirectory>$(MSBuildThisFileDirectory)\docs\LicenseTerms</LicenseDocumentDirectory>
    <FullLicenseFile>$(MSBuildThisFileDirectory)\LICENSE</FullLicenseFile>
    <OutputFullPath>$(MSBuildThisFileDirectory)</OutputFullPath>
    <OutputDrop Condition=" '$(OutputDrop)' == '' ">$(OutputFullPath)bin\$(Configuration)\</OutputDrop>
    <OutputPath>$(OutputDrop)\$(MSBuildProjectName)\</OutputPath>
    <DocumentationFile>$(OutputPath)$(MSBuildProjectName).xml</DocumentationFile>
    <BaseIntermediateOutputPath>$(OutputFullPath)obj\$(MSBuildProjectName)\</BaseIntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <IsTest>false</IsTest>
    <IsTest Condition="$(MSBuildProjectName.ToLowerInvariant().Contains('test'))">true</IsTest>
  </PropertyGroup>

  <PropertyGroup>
    <IsFunctionsProject>false</IsFunctionsProject>
    <IsFunctionsProject Condition="$(MSBuildProjectName.StartsWith('PortabilityService.Functions'))">true</IsFunctionsProject>
  </PropertyGroup>

  <PropertyGroup>
    <IsOnWindows>false</IsOnWindows>
    <IsOnWindows Condition="'$(OS)' == 'Windows_NT'">true</IsOnWindows>
  </PropertyGroup>

  <!-- Conditions where the assemblies are not signed:
    1. Assembly signing not supported on Linux, yet: `CS7027: Error signing output with public key from file`
    2. The Functions assembly can't be signed because the Azure Functions SDK has unsigned dependencies
    3. Test projects are not signed -->
  <PropertyGroup>
    <ShouldSignAssembly>true</ShouldSignAssembly>
    <ShouldSignAssembly Condition="!$(IsOnWindows)">false</ShouldSignAssembly>
    <ShouldSignAssembly Condition="$(IsFunctionsProject)">false</ShouldSignAssembly>
    <ShouldSignAssembly Condition="$(IsTest)">false</ShouldSignAssembly>
  </PropertyGroup>

  <PropertyGroup Condition="$(ShouldSignAssembly)">
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)\PortabilityTools.snk</AssemblyOriginatorKeyFile>
    <DefineConstants>$(DefineConstants);FEATURE_STRONGNAMESIGNING</DefineConstants>
  </PropertyGroup>

  <!-- Trying to mitigate the number of warnings that the solution contains by
    adding this into our Release builds.  As a result, it should be caught in
    our PRs because of the CI builds -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <!--NuGet properties-->
  <PropertyGroup>
    <Authors>Microsoft</Authors>
    <PackageLicenseUrl>https://github.com/Microsoft/dotnet-apiport/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/Microsoft/dotnet-apiport</PackageProjectUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageTags>.NET portability apiport</PackageTags>
    <Copyright>Copyright 2017</Copyright>
    <VersionFile>$(MSBuildThisFileDirectory)\.build\version.txt</VersionFile>
    <InfoVersionFile>$(MSBuildThisFileDirectory)\.build\infoversion.txt</InfoVersionFile>
    <Version Condition="Exists($(VersionFile))">$([System.IO.File]::ReadAllText($(VersionFile)).Trim())</Version>
    <InformationalVersion Condition="Exists($(VersionFile))">$([System.IO.File]::ReadAllText($(InfoVersionFile)).Trim())</InformationalVersion>
  </PropertyGroup>

  <!-- Some of the project types do not have a pack target. This creates a default empty pack target that will be overridden in supported project types -->
  <Target Name="Pack">
  </Target>
</Project>
