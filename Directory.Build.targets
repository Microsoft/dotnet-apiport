<?xml version="1.0" encoding="utf-8"?>
<Project>

  <!-- Depending on whether it is a VSIX or MSIL, choose the correct certificate.
       1) By default, the VSIX project just packages the contents, so
       CopyBuildOutputToOutputDirectory/IncludeAssemblyInVSIXContainer will be
       false. But if you have a VSIX that builds a DLL as well, it will have both
       properties set as true.

       2) When conditions are chosen from top-down... so if multiple ones are true,
       the first one it encounters is the type it chooses.
  -->
  <Choose>
    <When Condition="'$(TargetVsixContainerName)' != '' AND '$(CopyBuildOutputToOutputDirectory)' == 'false' AND '$(IncludeAssemblyInVSIXContainer)' == 'false'">
      <ItemGroup>
        <FilesToSign Include="$(TargetVsixContainer)">
          <Authenticode>VsixSHA2</Authenticode>
        </FilesToSign>
      </ItemGroup>
    </When>
    <When Condition="'$(OutputType)' == 'Exe' OR '$(OutputType)' == 'Library'">
      <ItemGroup>
        <FilesToSign Include="$(OutDir)\$(TargetName)$(TargetExt)">
          <Authenticode>Microsoft</Authenticode>
        </FilesToSign>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <FilesToSign Include="$(OutDir)\$(TargetName)$(TargetExt)">
          <Authenticode>MicrosoftSHA1</Authenticode>
        </FilesToSign>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <PackageReference Include="MicroBuild.Core" Version="0.2.0" Condition="!$(IsTest)">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.3.0-beta1">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>

    <!-- GitVersionTask is not compiled against .NET Core, so importing the targets will
         result in a failure because it will try to resolve Microsoft.Build.Utilities v4.0 -->
    <PackageReference Include="GitVersionTask" Version="4.0.0-beta0012" Condition=" '$(MSBuildRuntimeType)' != 'Core' ">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!-- In .NET Core SDK 1.0-rc3, all *.cs files are implicitly added for compiled.  This includes the test files we embed as resources.
       We explicitly remove them here so that they are not compiled.
       BUG: https://github.com/dotnet/sdk/issues/977 -->
  <Target Name="RemoveEmbeddedResources"
          BeforeTargets="CoreCompile">
    <ItemGroup>
        <Compile Remove="@(EmbeddedResource-> '%(Identity)')" />
    </ItemGroup>
  </Target>

</Project>
